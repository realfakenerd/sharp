import{Argument as t,Option as e,Command as n,program as i}from"@commander-js/extra-typings";import{green as o,redBright as a,bold as s}from"colorette";import r from"figlet";import{createSpinner as p}from"nanospinner";import u from"sharp";const{error:m,success:c,start:d}=p("running...",{color:"green",interval:100,stream:process.stdout}),h=t=>c({text:o(t),mark:"✅"}),l=t=>m({text:a(t),mark:"❌"});function f(t){return o(t)}function g(t){const e=t.split("/").pop();return{filename:e?.split(".")[0],extension:e?.split(".")[1]}}const w=new t("source",f("Input file, can be path or an url")).argRequired(),y=new t("output",f("Output file name, will be same as input file if no output given")).argOptional(),$=new e("-f, --format <type>",f("Format to be used on output")).makeOptionMandatory(),z=new n("format").description(f("Force output to a given format.")).addArgument(w).addArgument(y).addOption($).action((async(t,e,n)=>{await async function({input:t,output:e,format:n,options:i}){d();try{const o=n,a=e??`./${g(t).filename}.${o}`,r=u(t);r.toFormat(o,i);const p=await r.toFile(`./${a}`);h(`${s(t)} changed to ${s(a)} ${function(t,e=2){if(isNaN(t)||!Number.isFinite(t))return"0 Bytes";const n=e<0?0:e,i=["Bytes","KiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"];let o=0;for(;t>=1024&&o<i.length-1;)t/=1024,o++;const a=t.toFixed(n);return`${parseFloat(a)} ${i[o]}`}(p.size)}`)}catch(t){l(a(t))}}({input:t,output:e,format:n.format})}));async function x({input:t,output:e,size:n}){d();try{const i=u(t),{filename:a,extension:r}=g(t),p=`${a}_${n.height}.${r}`;i.resize(n);const m=await i.toFile(e??p);h(o(`${s(p)} resized to ${m.width}x${m.height}`))}catch(t){l(a(t))}}const B=new e("-w, --width [size]",f("How many pixels wide the resultant image should be.")),F=new e("-h, --height [size]",f("How many pixels high the resultant image should be.")),I=new e("-m, --multi [sizes]",f("If present, output many sizes at once.")),v=new n("resize").description(f("Resize image to width, height or width x height.")).addArgument(w).addArgument(y).addOption(B).addOption(F).addOption(I).action((async(t,e,{height:n,multi:i,width:o})=>{const a={width:o?parseInt(o):void 0,height:n?parseInt(n):void 0};if(!i||"string"!=typeof i)return await x({input:t,output:e,size:a});{const n=i.split(",");Promise.all(n.map((async n=>{await x({input:t,output:e,size:{height:parseInt(n)}})})))}}));(async()=>{console.log(`\n${o(r.textSync("Sharpen",{font:"3D-ASCII"}))}\n`),i.name("sharpen").description("CLI commands to sharpen you vision ;)").version("0.0.1"),i.addCommand(z).addCommand(v),await i.parseAsync()})();
